package com.yfy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yfy.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Session_key = new Property(1, String.class, "session_key", false, "SESSION_KEY");
        public final static Property Headpic = new Property(2, String.class, "headpic", false, "HEADPIC");
        public final static Property Term = new Property(3, String.class, "term", false, "TERM");
        public final static Property Realname = new Property(4, String.class, "realname", false, "REALNAME");
        public final static Property Pass_word = new Property(5, String.class, "pass_word", false, "PASS_WORD");
        public final static Property User_type = new Property(6, String.class, "user_type", false, "USER_TYPE");
        public final static Property Schoolname = new Property(7, String.class, "schoolname", false, "SCHOOLNAME");
        public final static Property Classname = new Property(8, String.class, "classname", false, "CLASSNAME");
        public final static Property Sex = new Property(9, String.class, "sex", false, "SEX");
        public final static Property Schoolid = new Property(10, String.class, "schoolid", false, "SCHOOLID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_KEY\" TEXT NOT NULL ," + // 1: session_key
                "\"HEADPIC\" TEXT NOT NULL ," + // 2: headpic
                "\"TERM\" TEXT NOT NULL ," + // 3: term
                "\"REALNAME\" TEXT NOT NULL ," + // 4: realname
                "\"PASS_WORD\" TEXT NOT NULL ," + // 5: pass_word
                "\"USER_TYPE\" TEXT NOT NULL ," + // 6: user_type
                "\"SCHOOLNAME\" TEXT NOT NULL ," + // 7: schoolname
                "\"CLASSNAME\" TEXT," + // 8: classname
                "\"SEX\" TEXT," + // 9: sex
                "\"SCHOOLID\" TEXT NOT NULL );"); // 10: schoolid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_key());
        stmt.bindString(3, entity.getHeadpic());
        stmt.bindString(4, entity.getTerm());
        stmt.bindString(5, entity.getRealname());
        stmt.bindString(6, entity.getPass_word());
        stmt.bindString(7, entity.getUser_type());
        stmt.bindString(8, entity.getSchoolname());
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
        stmt.bindString(11, entity.getSchoolid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_key());
        stmt.bindString(3, entity.getHeadpic());
        stmt.bindString(4, entity.getTerm());
        stmt.bindString(5, entity.getRealname());
        stmt.bindString(6, entity.getPass_word());
        stmt.bindString(7, entity.getUser_type());
        stmt.bindString(8, entity.getSchoolname());
 
        String classname = entity.getClassname();
        if (classname != null) {
            stmt.bindString(9, classname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(10, sex);
        }
        stmt.bindString(11, entity.getSchoolid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // session_key
            cursor.getString(offset + 2), // headpic
            cursor.getString(offset + 3), // term
            cursor.getString(offset + 4), // realname
            cursor.getString(offset + 5), // pass_word
            cursor.getString(offset + 6), // user_type
            cursor.getString(offset + 7), // schoolname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // classname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sex
            cursor.getString(offset + 10) // schoolid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSession_key(cursor.getString(offset + 1));
        entity.setHeadpic(cursor.getString(offset + 2));
        entity.setTerm(cursor.getString(offset + 3));
        entity.setRealname(cursor.getString(offset + 4));
        entity.setPass_word(cursor.getString(offset + 5));
        entity.setUser_type(cursor.getString(offset + 6));
        entity.setSchoolname(cursor.getString(offset + 7));
        entity.setClassname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSex(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSchoolid(cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
